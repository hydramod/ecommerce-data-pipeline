services:
  spark-master:
    image: bitnami/spark:3.5
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_NO_DAEMONIZE=true
    ports:
      - 7077:7077
      - 8081:8080
    volumes:
      - ../../analytics/spark-jobs:/opt/jobs
      - lake:/lake
    networks:
      - mesh
    depends_on:
      - kafka

  spark-worker:
    image: bitnami/spark:3.5
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES:-2}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY:-2g}
    volumes:
      - ../../analytics/spark-jobs:/opt/jobs
      - lake:/lake
    networks:
      - mesh
    depends_on:
      - spark-master

  hive-metastore-db:
    image: postgres:15
    container_name: hive-metastore-db
    environment:
      POSTGRES_USER: ${HIVE_METASTORE_USER:-hive}
      POSTGRES_PASSWORD: ${HIVE_METASTORE_PASSWORD:-hive}
      POSTGRES_DB: ${HIVE_METASTORE_DB:-metastore}
    networks:
      - mesh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${HIVE_METASTORE_USER:-hive}"]
      interval: 10s
      timeout: 5s
      retries: 5

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    environment:
      - HIVE_METASTORE_DB_HOST=hive-metastore-db
      - HIVE_METASTORE_DB_PORT=5432
      - HIVE_METASTORE_DB_NAME=metastore
      - HIVE_METASTORE_DB_TYPE=postgres
      - HIVE_METASTORE_DB_USER=hive
      - HIVE_METASTORE_DB_PASS=hive
      - METASTORE_PORT=9083
    ports:
      - 9083:9083
    depends_on:
      hive-metastore-db:
        condition: service_healthy
    networks:
      - mesh

  trino:
    image: trinodb/trino:428
    container_name: trino
    ports:
      - ${TRINO_HTTP_PORT:-8090}:8080
    volumes:
      - ../../analytics/trino/catalog:/etc/trino/catalog
      - lake:/lake
    depends_on:
      - hive-metastore
    networks:
      - mesh

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - 3001:3000
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metastore
      - MB_DB_PORT=5432
      - MB_DB_HOST=hive-metastore-db
      - MB_DB_USER=hive
      - MB_DB_PASS=hive
    networks:
      - mesh
    depends_on:
      - trino

  airflow-webserver:
    image: apache/airflow:2.9.2
    container_name: airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://${HIVE_METASTORE_USER:-hive}:${HIVE_METASTORE_PASSWORD:-hive}@hive-metastore-db:5432/${HIVE_METASTORE_DB:-metastore}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW_UID=50000
      - AIRFLOW_GID=0
      - _AIRFLOW_WWW_USER_USERNAME=${_AIRFLOW_WWW_USER_USERNAME:-admin}
      - _AIRFLOW_WWW_USER_PASSWORD=${_AIRFLOW_WWW_USER_PASSWORD:-admin}
    entrypoint: ["/opt/scripts/init-airflow.sh"]
    command: webserver
    ports:
      - 8082:8080
    volumes:
    - airflow_dags:/opt/airflow/dags
    - airflow_logs:/opt/airflow/logs
    - airflow_plugins:/opt/airflow/plugins
    - ../../analytics/airflow/dags:/opt/airflow/dags
    - ./scripts/init-airflow.sh:/opt/scripts/init-airflow.sh
    - lake:/lake
    depends_on:
      hive-metastore-db:
        condition: service_healthy
    networks:
      - mesh

  airflow-scheduler:
    image: apache/airflow:2.9.2
    container_name: airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://${HIVE_METASTORE_USER:-hive}:${HIVE_METASTORE_PASSWORD:-hive}@hive-metastore-db:5432/${HIVE_METASTORE_DB:-metastore}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW_UID=50000
      - AIRFLOW_GID=0
    entrypoint: ["/opt/scripts/init-airflow.sh"]
    command: scheduler
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
      - ../../analytics/airflow/dags:/opt/airflow/dags
      - ./scripts/init-airflow.sh:/opt/scripts/init-airflow.sh
      - lake:/lake
    depends_on:
      airflow-webserver:
        condition: service_started
      hive-metastore-db:
        condition: service_healthy
    networks:
      - mesh

volumes:
  minio_data:
    driver: local
  trino_data:
    driver: local
  hive_metastore_db:
    driver: local
  lake:
    driver: local
  airflow_logs:
    driver: local
  airflow_dags:
    driver: local
  airflow_plugins:
    driver: local

networks:
  mesh:

